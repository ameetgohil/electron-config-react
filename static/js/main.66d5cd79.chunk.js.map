{"version":3,"sources":["ConfigForm.js","App.js","serviceWorker.js","index.js","logo.svg","electron-config.js"],"names":["ConfigForm","props","state","atomicNo","setAtomicNo","bind","e","this","setState","parseInt","_inputElement","value","preventDefault","className","onSubmit","ref","a","type","name","placeholder","getConfiguration","map","x","React","Component","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports","_","require","elecLevString","vertical","elecLevel","elecLevStringNoOrbital","finalConfig","electrons","once","possElec","reduce","b","possibleElec","end","Math","ceil","length","range","i","horizontal","temp","splice","tempVal","filter","lta","push","tempStr","tempInt","makeAList","possibleLevels","makeArrayList","levels","numElectrons","orbitals","clearUseless","sumElec","makeElecLevel","log","makeConfigArray","n","printElecLevel"],"mappings":"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","file":"static/js/main.66d5cd79.chunk.js","sourcesContent":["import React from 'react';\n//impor\n//const ec = require('./electron-config');\nimport getConfiguration from \"./electron-config\";\nclass ConfigForm extends React.Component{\n    constructor(props){\n        super(props);\n\n        // Set initial state\n        this.state = {\n            atomicNo: 10\n        }\n\n        this.setAtomicNo = this.setAtomicNo.bind(this);\n    }\n\n    // handler\n    setAtomicNo(e) {\n        // Update data\n        //this.state.atomicNo = );\n        // Update state\n        this.setState({atomicNo: parseInt(this._inputElement.value)});\n\n        e.preventDefault();\n    }\n//<input type=\"submit\" value=\"Get Config\" />\n    render() {\n        return (\n            <div className=\"form-input\">\n                <form onSubmit={this.setAtomicNo}>\n                    <label>\n                        <input className=\"input\" ref={(a) => this._inputElement = a} type=\"number\" name=\"atomicno\" placeholder=\"Enter Atomic No\" />\n                        <button className=\"btn\" type=\"submit\">Get Config</button>\n                    </label>\n                </form>\n                <div className=\"form-output\">\n                    Atomic Number: {this.state.atomicNo}\n                    <div className=\"econfig\">\n                {getConfiguration(this.state.atomicNo).map((x) => {return <li>{x}</li>})}\n                </div>\n            </div>\n            </div>\n            \n        )\n    }\n}\n\nexport default ConfigForm;","import React from 'react';\nimport logo from './logo.svg';\nimport ConfigForm from './ConfigForm';\nimport './App.css';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\"  />\n        \n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          \n        </a>\n      </header>\n      <ConfigForm/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const _ = require('lodash');\n\n//let exports = module.exports = {};\nlet elecLevString = [];\nlet vertical = [];\nlet elecLevel = [];\nlet elecLevStringNoOrbital =[];\n\nfunction orbitals(electrons){\n    if(electrons <= 2) {\n        return 1;\n    }\n    let levels = 0;\n    let numElectrons = 0;\n    for(let i of _.range(1, electrons + 100)) {\n        for(let j of _.range(2)) {\n            if(numElectrons >= electrons) {\n                return levels;\n            }\n\n            levels += 1;\n            numElectrons += 2 * i * i;\n        }\n    }\n    return -1;\n}\n\nfunction makeArrayList(possibleLevels) {\n    for(let i of _.range(1, possibleLevels+1)) {\n        let temp = [];\n        for(let x of _.range(i)) {\n            if(x == 0) {\n                temp.push(2);\n                continue;\n            }\n            temp.push(temp[temp.length -1] + 4);\n        }\n        vertical.push(temp);\n    }\n}\n\nfunction clearUseless(){\n    for(let i of _.range(vertical.length) ){\n        let temp = vertical[vertical.length -1-i];\n        if(temp.length > i + 1) {\n            for(let x of _.range(i+1, temp.length)) {\n                temp.splice(i+1, 1);\n            }\n        }\n\n        vertical[vertical.length -1 -i] = temp;\n    }\n}\n\nfunction printConfig(){\n    for(let i of _.range(vertical.length)) {\n        let horizontal = vertical[i];\n\t    for(let x of _.range(horizontal.length)) {\n            process.stdout.write(horizontal[x] + \"  \");//, end =  \"  \");\n\t    }\n        console.log(\" \");\n    }\n}\n\nfunction makeConfigArray() {\n    elecLevStringNoOrbital.push(\"Electron Configuration without oribtal names\");\n    for(let i of _.range(vertical.length)) {\n        let horizontal = vertical[i];\n        let tempStr = \"\";\n\t    for(let x of _.range(horizontal.length)) {\n            //process.stdout.write(horizontal[x] + \"  \");//, end =  \"  \");\n            tempStr += horizontal[x] + \"  \";\n\t    }\n        elecLevStringNoOrbital.push(tempStr);\n    }\n}\n\nfunction possibleElec(){\n    let electrons = 0;\n    for(let v of vertical) {\n        electrons += v.reduce((a, b) => a + b, 0);\n    }\n\n    return electrons;\n}\n\nfunction finalConfig(electrons){\n    let once = true;\n    let possElec = possibleElec();\n    let end = Math.ceil(vertical.length/2.0);\n    for(let i of _.range(end)) {\n        let horizontal = vertical[vertical.length -1 -i];\n        let temp = horizontal[horizontal.length-1];\n        if(possElec - temp > electrons) {\n\t        horizontal.splice(horizontal.length -1, 1);\n            possElec -= temp;\n        }\n        else if(possElec - temp == electrons) {\n\t        horizontal.splice(horizontal.length -1, 1);\n            possElec -= temp;\n            once = false;\n        }\n        else if(once && possElec - temp < electrons) {\n            let horVal = horizontal[horizontal.length -1];\n            let tempVal = horVal - possElec + electrons;\n            horizontal[horizontal.length -1] = tempVal;\n            possElec = electrons;\n            once = false;\n        }\n\n    }\n    //remove empty lists\n    vertical = vertical.filter(a => { if(a.length != 0) return a;});\n}\n\n\nfunction makeElecLevel() {\n    for(let i of _.range(vertical.length)) {\n        let sumElec = 0;\n        let horizontal = vertical[i];\n        for(let x of _.range(horizontal.length)) {\n            sumElec += horizontal[x];\n        }\n        elecLevel.splice(i, 0, sumElec);\n    }\n}\n\nfunction printElecLevel() {\n    for(let i of _.range(elecLevel.length)) {\n        let n = i+1;\n        let temp = elecLevel[i];\n        console.log(\"Level \" +  n + \" \" + temp + \" electrons\");\n    }\n}\n\nfunction makeStringArrayList() {\n    for(let i of _.range(vertical.length)) {\n        let k = i + 1;\n        let tempStr = \"\";\n        let horizontal = vertical[i];\n        for(let x of _.range(horizontal.length)) {\n            let temp = horizontal[x];\n            tempStr += x + \" \";\n        }\n\n        elecLevString.push(tempStr);\n    }\n}\n\nfunction lta(atomicNo) {\n    if(atomicNo < 221) {\n        makeAList();\n    }\n}\n\nfunction makeAList(){\n    let a = \"Electron Configuration with oribtal names\";\n    elecLevString.push(a);\n    for(let i of _.range(vertical.length)) {\n        let tempStr = \"\";\n        let temp = vertical[i];\n        for(let x of _.range(temp.length)) {\n            tempStr = tempStr + (i+1);\n            if(x == 0) {\n                tempStr += \"s\";\n            }\n            else if(x == 1) {\n                tempStr += \"p\";\n            }\n            else if(x == 2) {\n                tempStr += \"d\";\n            }\n            else if(x == 3) {\n                tempStr += \"f\";\n            }\n            else if(x == 4) {\n                tempStr += \"g\";\n            }\n            let tempInt = temp[x];\n            tempStr += tempInt + \"  \";\n        }\n        elecLevString.push(tempStr);\n    }\n}\n\nfunction getConfiguration(atomicNo) {\n    elecLevString = [];\n    vertical = [];\n    elecLevel = [];\n    elecLevStringNoOrbital = [];\n    let enlevels = orbitals(atomicNo);\n    makeArrayList(enlevels);\n    //printConfig();\n    clearUseless();\n    finalConfig(atomicNo);\n    makeElecLevel();\n    let output = lta(atomicNo);\n    \n    if(atomicNo < 221) {\n\tfor(let x of elecLevString) {\n\t    console.log(x);\n\t}\n    }\n    else {\n    //printConfig();\n    makeConfigArray();\n    }\n    \n    printElecLevel();\n    //elecLevString = elecLevString.map((x) => {return \"<li>\" + x + \"</li>\";});\n    if(atomicNo < 221)\n        return elecLevString;\n    else\n        return elecLevStringNoOrbital;\n}\n\nexport default getConfiguration;\n\n//exports.getConfiguration(10);\n//exports.getConfiguration(100);\n"],"sourceRoot":""}